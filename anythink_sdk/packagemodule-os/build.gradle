import com.android.annotations.NonNull
import com.android.manifmerger.ManifestMerger2
import com.android.manifmerger.ManifestMerger2.Invoker
import com.android.manifmerger.ManifestMerger2.MergeType
import com.android.manifmerger.MergingReport
import com.android.manifmerger.XmlDocument
import com.android.utils.ILogger
import com.google.common.base.Charsets
import com.google.common.io.Files

apply plugin: 'com.android.library'

def class_core_output_dir = "sdk_core/classes"
def class_china_adapter_output_dir = "sdk_adapter_china/classes"
def class_nonchina_adapter_output_dir = "sdk_adapter_nonchina/classes";


android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-android.txt'
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}


task cpClassAndResOnProject  {
    doLast {
        delete buildDir.absolutePath + '/outputs'
        println '================= cpClassOnProject ==============='

        copy {
            from rootProject.project(":core").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        copy {
            from rootProject.project(":china_plugin").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        copy {
            from rootProject.project(":myoffer").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        copy {
            from rootProject.project(":native").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        copy {
            from rootProject.project(":rewardvideo").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        //banner
        copy {
            from rootProject.project(":banner").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        //interstitial
        copy {
            from rootProject.project(":Interstitial").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }

        //splashad
        copy {
            from rootProject.project(":splashad").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }


        copy {
            from rootProject.project(":headbidding").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/anythink_core'
        }


        //china adapter class
        copy {
            from buildDir.absolutePath + '/outputs/anythink_core'
            into buildDir.absolutePath + '/outputs/china_adapter'
        }
        copy {
            from rootProject.project(":network_china_adapter").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/china_adapter'
        }

        //nonchina adapter class
        copy {
            from buildDir.absolutePath + '/outputs/anythink_core'
            into buildDir.absolutePath + '/outputs/nonchina_adapter'
        }
        copy {
            from rootProject.project(":network_nonchina_adapter").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/nonchina_adapter'
        }


        File baseProguardFile = new File(projectDir.absolutePath + "/proguard-android-base.txt")
        File targetProguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        String baseText = baseProguardFile.getText("utf-8")
        targetProguardFile.write(baseText, "utf-8")

    }

}

task cpSDKResToOutput {
    doLast {
        //copy resource
        copy {
            from rootProject.project(":core").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_core'
        }

        copy {
            from rootProject.project(":myoffer").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_core'
        }

        copy {
            from rootProject.project(":china_plugin").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_china_core'
        }

        copy {
            from rootProject.project(":native").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_native'
        }

        copy {
            from rootProject.project(":network_nonchina_adapter").buildDir.absolutePath + '/../network_res/'
            into buildDir.absolutePath + '/../../outputs/res_nonchina_adapter/res_network'
        }

        copy {
            from rootProject.project(":headbidding").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_hibid'
        }
    }
}

//AnyThink Core SDK jar
task getAnythinkCoreJar(type: Jar) {
    println '=================== getAnythinkCoreJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_sdk_debug.jar'
    destinationDir file(buildDir.absolutePath + '/outputs/jar')
    from(buildDir.absolutePath + '/outputs/anythink_core')
    exclude "**/R.class", "**/R\$*.class", "**/BuildConfig.class"
}
task proguardAnyThinkCoreJar(type: proguard.gradle.ProGuardTask) {
    println '================= proguardAnyThinkCoreJar ==============='
    def local_properties = rootDir.absolutePath + '/local.properties'
    def properties = new Properties()
    properties.load(new FileInputStream(local_properties))
    def androidSDKDir = properties.getProperty('sdk.dir')
//    def androidSDKDir = plugins.getPlugin('com.android.application').sdkHandler.getSdkFolder()
    def androidJarDir = androidSDKDir.toString() + '/platforms/android-28/android.jar'
    println androidSDKDir
    def androidSupportv4Dir = buildDir.absolutePath + '/../../outputs/supports/android-support-v4.jar'
    // 未混淆的jar路径
    injars buildDir.absolutePath + '/outputs/jar/anythink_sdk_debug.jar'
    // 混淆后的jar输出路径
    outjars buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar'
    //libraryjars
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars(androidJarDir)
    libraryjars(androidSupportv4Dir)

    // 混淆协议
    configuration 'proguard-rules.pro'
}



//AnyThink China Adapter jar
task getAnythinkChinaAdapterJar(type: Jar) {
    println '=================== getAnythinkChinaAdapterJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_adapter_china_debug.jar'
    destinationDir file(buildDir.absolutePath + '/outputs/jar')
    from(buildDir.absolutePath + '/outputs/china_adapter')
    exclude "**/R.class", "**/R\$*.class", "**/BuildConfig.class"
}
task proguardAnythinkChinaAdapterJar(type: proguard.gradle.ProGuardTask) {
    println '================= proguardAnythinkChinaAdapterJar ==============='
    def local_properties = rootDir.absolutePath + '/local.properties'
    def properties = new Properties()
    properties.load(new FileInputStream(local_properties))
    def androidSDKDir = properties.getProperty('sdk.dir')
//    def androidSDKDir = plugins.getPlugin('com.android.application').sdkHandler.getSdkFolder()
    def androidJarDir = androidSDKDir.toString() + '/platforms/android-28/android.jar'
    println androidSDKDir
    def androidSupportv4Dir = buildDir.absolutePath + '/../../outputs/supports/android-support-v4.jar'
    // 未混淆的jar路径
    injars buildDir.absolutePath + '/outputs/jar/anythink_adapter_china_debug.jar'
    // 混淆后的jar输出路径
    outjars buildDir.absolutePath + '/../../outputs/jar/anythink_adapter_china_release.jar'
    //libraryjars
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars(androidJarDir)
    libraryjars(androidSupportv4Dir)
    libraryjars(buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar')

    // 混淆协议
    configuration 'proguard-rules.pro'
}


//AnyThink NonChina Adapter jar
task getAnythinkNonChinaAdapterJar(type: Jar) {
    println '=================== getAnythinkNonChinaAdapterJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_adapter_nonchina_debug.jar'
    destinationDir file(buildDir.absolutePath + '/outputs/jar')
    from(buildDir.absolutePath + '/outputs/nonchina_adapter')
    exclude "**/R.class", "**/R\$*.class", "**/BuildConfig.class"
}
task proguardAnythinkNonChinaAdapterJar(type: proguard.gradle.ProGuardTask) {
    println '================= proguardAnythinkNonChinaAdapterJar ==============='
    def local_properties = rootDir.absolutePath + '/local.properties'
    def properties = new Properties()
    properties.load(new FileInputStream(local_properties))
    def androidSDKDir = properties.getProperty('sdk.dir')
//    def androidSDKDir = plugins.getPlugin('com.android.application').sdkHandler.getSdkFolder()
    def androidJarDir = androidSDKDir.toString() + '/platforms/android-28/android.jar'
    println androidSDKDir
    def androidSupportv4Dir = buildDir.absolutePath + '/../../outputs/supports/android-support-v4.jar'
    // 未混淆的jar路径
    injars buildDir.absolutePath + '/outputs/jar/anythink_adapter_nonchina_debug.jar'
    // 混淆后的jar输出路径
    outjars buildDir.absolutePath + '/../../outputs/jar/anythink_adapter_nonchina_release.jar'
    //libraryjars
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars(androidJarDir)
    libraryjars(androidSupportv4Dir)
    libraryjars(buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar')

    // 混淆协议
    configuration 'proguard-rules.pro'
}




task unzipAnythinkCore(type: Copy) {
    def zipFile = file(buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar')
    def outputDir = file(buildDir.absolutePath + '/../../outputs/' + class_core_output_dir)
    from zipTree(zipFile)
    into outputDir
}


task unzipAnythinkChinaAdapter(type: Copy) {
    def zipFile = file(buildDir.absolutePath + '/../../outputs/jar/anythink_adapter_china_release.jar')
    def outputDir = file(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    from zipTree(zipFile)
    into outputDir
}


task unzipAnythinkNonChinaAdapter(type: Copy) {
    def zipFile = file(buildDir.absolutePath + '/../../outputs/jar/anythink_adapter_nonchina_release.jar')
    def outputDir = file(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    from zipTree(zipFile)
    into outputDir
}

/**------------------------------------------------SDK Core Jar Start-----------------------------------------------**/
task makeCoreJar(type: Jar) {
    println '=============== makeCoreJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_core.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/core/**/*.class", "com/anythink/myoffer/**/*.class", "com/anythink/network/myoffer/**/*.class"
}

task makeChinaJar(type: Jar) {
    println '=============== makeChinaJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_china_core.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/china/**/*.class"
}


task makeRewardedVideoJar(type: Jar) {
    println '=============== makeRewardedVideoJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_rewardedvideo.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/rewardvideo/**/*.class"
}

task makeNativeJar(type: Jar) {
    println '=============== makeNativeJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_nativead.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/nativead/**/*.class"
}

task makeBannerJar(type: Jar) {
    println '=============== makeBannerJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_banner.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/banner/**/*.class"
}

task makeInterstitialJar(type: Jar) {
    println '=============== makeInterstitialJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_interstitial.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/interstitial/**/*.class"
}

task makeSplashAdJar(type: Jar) {
    println '=============== makeSplashAdJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_splash.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/'+ class_core_output_dir)
    include "com/anythink/splashad/**/*.class"
}



/**------------------------------------------------SDK Core Jar End-----------------------------------------------**/


/**------------------------------------------------NonChina Adapter Jar Start-----------------------------------------------**/
task makeNetworkFBJar(type: Jar) {
    println '=============== makeNetworkFBJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_facebook.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/facebook/**/*.class"
}

task makeNetworkAdmobJar(type: Jar) {
    println '=============== makeNetworkAdmobJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_admob.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/admob/**/*.class"
}

task makeNetworkApplovinJar(type: Jar) {
    println '=============== makeNetworkApplovinJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_applovin.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/applovin/**/*.class"
}

task makeNetworkFlurryJar(type: Jar) {
    println '=============== makeNetworkFlurryJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_flurry.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/flurry/**/*.class"
}

task makeNetworkInmobiJar(type: Jar) {
    println '=============== makeNetworkInmobiJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_inmobi.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/inmobi/**/*.class"
}

task makeNetworkMintegralNonchinaJar(type: Jar) {
    println '=============== makeNetworkMintegralNonchinaJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_mintegral_nonchina.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/mintegral/**/*.class"
}

task makeNetworkMopubJar(type: Jar) {
    println '=============== makeNetworkMopubJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_mopub.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/mopub/**/*.class"
}



task makeNetworkAdcolonyJar(type: Jar) {
    println '=============== makeNetworkAdcolonyJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_adcolony.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/adcolony/**/*.class"
}

task makeNetworkChartboostJar(type: Jar) {
    println '=============== makeNetworkChartboostJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_chartboost.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/chartboost/**/*.class"
}

task makeNetworkIronsourceJar(type: Jar) {
    println '=============== makeNetworkIronsourceJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ironsource.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/ironsource/**/*.class"
}

task makeNetworkTapjoyJar(type: Jar) {
    println '=============== makeNetworkTapjoyJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_tapjoy.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/tapjoy/**/*.class"
}

task makeNetworkUnityadsJar(type: Jar) {
    println '=============== makeNetworkUnityadsJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_unityads.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/unityads/**/*.class"
}

task makeNetworkVungleJar(type: Jar) {
    println '=============== makeNetworkVungleJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_vungle.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/vungle/**/*.class"
}

task makeNetworkTouTiaoNonChinaJar(type: Jar) {
    println '=============== makeNetworkTouTiaoNonChinaJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_pangle_nonchina.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/toutiao/**/*.class"
}


task makeNetworkAppnextJar(type: Jar) {
    println '=============== makeNetworkAppnextJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_appnext.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/appnext/**/*.class"
}



task makeNetworkNendJar(type: Jar) {
    println '=============== makeNetworkNendJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_nend.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/nend/**/*.class"
}

task makeNetworkMaioJar(type: Jar) {
    println '=============== makeNetworkMaioJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_maio.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/maio/**/*.class"
}

task makeNetworkStartAppJar(type: Jar) {
    println '=============== makeNetworkStartAppJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_startapp.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/startapp/**/*.class"
}

task makeNetworkSuperawesomeJar(type: Jar) {
    println '=============== makeNetworkSuperawesomeJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_superawesome.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/awesome/**/*.class"
}


task makeNetworkOguryJar(type: Jar) {
    println '=============== makeNetworkOguryJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ogury.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/ogury/**/*.class"
}

task makeNetworkFyberJar(type: Jar) {
    println '=============== makeNetworkFyberJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = 'anythink_network_fyber.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/fyber/**/*.class"
}


task makeNetworkHuaweiJar(type: Jar) {
    println '=============== makeNetworkHuaweiJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = 'anythink_network_huawei.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/huawei/**/*.class"
}

task makeNetworkKidozJar(type: Jar) {
    println '=============== makeNetworkKidozJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = 'anythink_network_kidoz.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/kidoz/**/*.class"
}

task makeNetworkMyTargetJar(type: Jar) {
    println '=============== makeNetworkMyTargetJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = 'anythink_network_mytarget.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_nonchina_adapter_output_dir)
    include "com/anythink/network/mytarget/**/*.class"
}

/**------------------------------------------------NonChina Adapter Jar End-----------------------------------------------**/


/**------------------------------------------------China Adapter Jar Start-----------------------------------------------**/

task makeNetworkMintegralChinaJar(type: Jar) {
    println '=============== makeNetworkMintegralChinaJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_mintegral_china.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/mintegral/**/*.class"
}

task makeNetworkGDTJar(type: Jar) {
    println '=============== makeNetworkGDTJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_gdt.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/gdt/**/*.class"
}
task makeNetworkTouTiaoChinaJar(type: Jar) {
    println '=============== makeNetworkTouTiaoChinaJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_pangle_china.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/toutiao/**/*.class"
}


task makeNetworkBaiduJar(type: Jar) {
    println '=============== makeNetworkBaiduJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_baidu.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/baidu/**/*.class"
}

task makeNetworkKSJar(type: Jar) {
    println '=============== makeNetworkKSJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_kuaishou.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/ks/**/*.class"
}

task makeNetworkSigmobJar(type: Jar) {
    println '=============== makeNetworkSigmobJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_sigmob.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/' + class_china_adapter_output_dir)
    include "com/anythink/network/sigmob/**/*.class"
}
/**------------------------------------------------China Adapter Jar End-----------------------------------------------**/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    File file = new File(projectDir.absolutePath + "/libs/anythink_network_oneway.jar")
    if (file.exists()) {
        implementation 'com.android.support:appcompat-v7:28.0.0'
    }

}


task makeCoreAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_core.jar"
        }

        copy {
            from projectDir.absolutePath + '/../outputs/res_core/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":core").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));
        libraryManifestList.add(file(rootProject.project(":myoffer").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_core.xml"));
    }
}

task outputCoreAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_core.aar')
            }
        }
    }
}


task makeChinaCoreAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_china_core.jar"
        }

        copy {
            from projectDir.absolutePath + '/../outputs/res_china_core/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":china_plugin").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_core-china.xml"));
    }
}

task outputChinaCoreAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_china_core.aar')
            }
        }
    }
}


task makeNativeAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_nativead.jar"
        }
        copy {
            from projectDir.absolutePath + '/../outputs/res_native/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":native").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_native.xml"));
    }
}

task outputNativeAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_native.aar')
            }
        }
    }
}

task makeRewardedVideoAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_rewardedvideo.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":rewardvideo").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_rewardvideo.xml"));
    }
}

task outputRewardedVideoAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_rewardvideo.aar')
            }
        }
    }
}

//banner
task makeBannerAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_banner.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":banner").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_banner.xml"));
    }
}

task outputBannerAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_banner.aar')
            }
        }
    }
}

//interstitial
task makeInterstitialAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_interstitial.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":Interstitial").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_interstitial.xml"));
    }
}

task outputInterstitialAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_interstitial.aar')
            }
        }
    }
}

//splashad
task makeSplashAdAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_splash.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":splashad").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_splash.xml"));
    }
}

task outputSplashAdAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_splash.aar')
            }
        }
    }
}


task makeNetworkAARRes {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"

        String jarName = "anythink_network_" + aarname.replaceAll("-","_") + ".jar"
        String moduel = ""

        if (isChina.equals("0")) {
            moduel = ":network_nonchina_adapter"
        }

        if (isChina.equals("1")) {
            moduel = ":network_china_adapter"
        }


        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include jarName
        }

        if (aarname.startsWith("applovin")) {
            copy {
                from projectDir.absolutePath + '/../outputs/res_nonchina_adapter/res_network/applovin'
                into projectDir.absolutePath + '/src/main/res'
            }
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(moduel).projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_" + aarname + ".xml"));

        if (isChina.equals("0")) {
            String networkDir = aarname.replaceAll("-nonchina", "")

            /**混淆配置**/
            File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
            StringBuffer proguardFileText = new StringBuffer()
            proguardFileText.append(proguardFile.getText("utf-8"));

            File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_nonchina_sdk/network/' + networkDir + "/proguard-android.txt");
            if (netwprkProguardFile.exists()) {
                proguardFileText.append("\n")
                proguardFileText.append(netwprkProguardFile.getText("utf-8"))
            }
            File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
            resultproguardFile.write(proguardFileText.toString(), "utf-8")
        }

        if (isChina.equals("1")) {
            String networkDir = aarname.replaceAll("-china", "")

            /**混淆配置**/
            File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
            StringBuffer proguardFileText = new StringBuffer()
            proguardFileText.append(proguardFile.getText("utf-8"));

            File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_china_sdk/network/' + networkDir + "/proguard-android.txt");
            if (netwprkProguardFile.exists()) {
                proguardFileText.append("\n")
                proguardFileText.append(netwprkProguardFile.getText("utf-8"))
            }
            File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
            resultproguardFile.write(proguardFileText.toString(), "utf-8")
        }

    }
}

task outputNetworkAAR  {
    doLast {
        String outputDir = ""
        if(isChina.equals("0")){
            outputDir = "adapter_nonchina_aar"
        }

        if(isChina.equals("1")){
            outputDir = "adapter_china_aar"
        }

        aarname = aarname.replaceAll("-","_")

        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/' + outputDir + "/"
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_' + aarname + '.aar')
            }
        }
    }
}


private void mergeManifest(List<File> libraryManifests, File originMaifestFile) {
    mergeManifest(libraryManifests,originMaifestFile, "", false);
}

private void mergeManifest(List<File> libraryManifests, File originMaifestFile, String networkName, boolean useOriginManifestFile){
    ILogger mLogger = new MiLogger()


    File reportFile = file(buildDir.absolutePath + "/embedManifestReport.txt")

    File aaptManifest = file(projectDir.absolutePath + "/src/main/AndroidManifest.xml")
    if (useOriginManifestFile) {
        aaptManifest = originMaifestFile
    }


    try {
        Invoker manifestMergerInvoker = ManifestMerger2.newMerger(originMaifestFile, mLogger, MergeType.APPLICATION)

        manifestMergerInvoker.addLibraryManifests(libraryManifests.toArray(new File[libraryManifests.size()]))

        // manifestMergerInvoker.setPlaceHolderValues(placeHolders)
        manifestMergerInvoker.setMergeReportFile(reportFile);

        MergingReport mergingReport = manifestMergerInvoker.merge();

        mLogger.info("Merging result:" + mergingReport.getResult());
        MergingReport.Result result = mergingReport.getResult();
        switch (result) {
            case MergingReport.Result.WARNING:
                mergingReport.log(mLogger);
        // fall through since these are just warnings.
            case MergingReport.Result.SUCCESS:
                XmlDocument xmlDocument = mergingReport.getMergedXmlDocument(MergingReport.MergedManifestKind.MERGED);
                try {
                    String annotatedDocument = mergingReport.getActions().blame(xmlDocument);
                    mLogger.verbose(annotatedDocument);
                } catch (Exception e) {
                    mLogger.error(e, "cannot print resulting xml");
                }
//                save(xmlDocument, origManifest);
//                mLogger.info("Merged manifest saved to " + origManifest);
                if (aaptManifest.exists()) {
//                    new PlaceholderEncoder().visit(xmlDocument);
                    save(xmlDocument, aaptManifest);
                    String manifestText = aaptManifest.getText()
                    if (networkName != null && !"".equals(networkName)) {
                        manifestText = manifestText.replaceAll("android:authorities=\"com.anythink.network." +networkName, "android:authorities=\"~\u007BapplicationId}")

                        manifestText = manifestText.replace('~', '$')

                        if("luomi".equals(networkName)){
                            manifestText = manifestText.replaceAll("com.anythink.network.luomi.fileprovider", "\u007BapplicationId}.fileprovider")
                        }
                    }

                    manifestText = manifestText.replaceAll("android:authorities=\"com.anythink.sdk.china", "android:authorities=\"~\u007BapplicationId}")
                    manifestText = manifestText.replace('~', '$')

                    manifestText = manifestText.replaceAll("<uses-sdk android:minSdkVersion=\"14\" />", "")
                    aaptManifest.write(manifestText, "utf-8")


                    mLogger.info("Merged aapt safe manifest saved to " + aaptManifest);
                }
                break;
            case MergingReport.Result.ERROR:
                mergingReport.log(mLogger);
                throw new RuntimeException(mergingReport.getReportString());
            default:
                throw new RuntimeException("Unhandled result type : " + mergingReport.getResult());
        }
    } catch (RuntimeException e) {
        // Unacceptable error
        e.printStackTrace()
        throw new RuntimeException(e);
    }
}

private void save(XmlDocument xmlDocument, File out) {
    try {
        Files.write(xmlDocument.prettyPrint(), out, Charsets.UTF_8);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

class MiLogger implements ILogger {

    @Override
    void error(
            @com.android.annotations.Nullable Throwable t,
            @com.android.annotations.Nullable String msgFormat, Object... args) {
        System.err.println(String.format("========== ERROR : " + msgFormat, args))
        if (t) t.printStackTrace(System.err)
    }

    @Override
    void warning(@NonNull String msgFormat, Object... args) {
        System.err.println(String.format("========== WARNING : " + msgFormat, args))
    }

    @Override
    void info(@NonNull String msgFormat, Object... args) {
        System.out.println(String.format("========== INFO : " + msgFormat, args))
    }

    @Override
    void verbose(@NonNull String msgFormat, Object... args) {
        // System.out.println(String.format("========== DEBUG : " + msgFormat, args))
    }
}


task copyChinaNecessaryResPackage  {
    doLast {
        ArrayList<String> networkChinaLibsPath = new ArrayList<>();

        networkChinaLibsPath.add("baidu");
        networkChinaLibsPath.add("gdt");
        networkChinaLibsPath.add("mintegral");
        networkChinaLibsPath.add("pangle");
        networkChinaLibsPath.add("kuaishou");
        networkChinaLibsPath.add("sigmob")


        copy {
            from projectDir.absolutePath + '/../AppChinaDemo/demo/'
            into projectDir.absolutePath + '/../outputs/releaseChinaDemo/'
        }

        copy {
            from projectDir.absolutePath + '/../network_china_sdk/network/'
            into projectDir.absolutePath + '/../outputs/network_sdk/china'
        }


        for (String name : networkChinaLibsPath) {
            copy {
                from projectDir.absolutePath + '/../outputs/aar/adapter_china_aar'
                into projectDir.absolutePath + '/../outputs/network_sdk/china/' + name + '/libs'
                include '*_network_' + name + '*.aar'
            }
        }


        copy {
            from projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            into projectDir.absolutePath + '/../outputs/china_sdk_release/libs'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/network_sdk/china'
            into projectDir.absolutePath + '/../outputs/china_sdk_release/network_sdk'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/china_sdk_release'
            into projectDir.absolutePath + '/../outputs/TopOnSDKRelease/China'
        }

    }

}

task copyNonChinaNecessaryResPackage  {
    doLast {
        ArrayList<String> networkNonChinaLibsPath = new ArrayList<>();

        networkNonChinaLibsPath.add("adcolony");
        networkNonChinaLibsPath.add("admob");
        networkNonChinaLibsPath.add("applovin");
        networkNonChinaLibsPath.add("appnext");
        networkNonChinaLibsPath.add("chartboost");
        networkNonChinaLibsPath.add("facebook");
        networkNonChinaLibsPath.add("flurry");
        networkNonChinaLibsPath.add("inmobi");
        networkNonChinaLibsPath.add("ironsource");
        networkNonChinaLibsPath.add("maio");
        networkNonChinaLibsPath.add("mintegral");
        networkNonChinaLibsPath.add("mopub");
        networkNonChinaLibsPath.add("nend");
        networkNonChinaLibsPath.add("startapp");
        networkNonChinaLibsPath.add("superawesome");
        networkNonChinaLibsPath.add("tapjoy");
        networkNonChinaLibsPath.add("unityads");
        networkNonChinaLibsPath.add("vungle");
        networkNonChinaLibsPath.add("ogury")
        networkNonChinaLibsPath.add("pangle")
        networkNonChinaLibsPath.add("fyber")
        networkNonChinaLibsPath.add("huawei")
        networkNonChinaLibsPath.add("kidoz")
        networkNonChinaLibsPath.add("mytarget")


        copy {
            from projectDir.absolutePath + '/../AppNonChinaDemo/demo/'
            into projectDir.absolutePath + '/../outputs/releaseNonChinaDemo/'
        }

        copy {
            from projectDir.absolutePath + '/../network_nonchina_sdk/network/'
            into projectDir.absolutePath + '/../outputs/network_sdk/non-china'
        }

        for (String name : networkNonChinaLibsPath) {
            copy {
                from projectDir.absolutePath + '/../outputs/aar/adapter_nonchina_aar'
                into projectDir.absolutePath + '/../outputs/network_sdk/non-china/' + name + '/libs'
                include '*_network_' + name + '*.aar'
            }

        }


        copy {
            from projectDir.absolutePath + '/../outputs/aar/anythink_sdk'
            into projectDir.absolutePath + '/../outputs/non-china_sdk_release/libs'
            exclude 'anythink_china_core.aar'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/network_sdk/non-china'
            into projectDir.absolutePath + '/../outputs/non-china_sdk_release/network_sdk'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/non-china_sdk_release'
            into projectDir.absolutePath + '/../outputs/TopOnSDKRelease/NonChina'
        }

    }

}

task makeTopOnSDK(type: Zip){
    destinationDir = file(projectDir.absolutePath + '/../outputs/')
    archiveName = "TopOn_SDK_v${SDK_VERSION}_${releaseTime()}_Release.zip"
    from(projectDir.absolutePath + '/../outputs/TopOnSDKRelease') {
        into('')
    }
}



def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}



getAnythinkCoreJar.dependsOn 'cpClassAndResOnProject'
getAnythinkChinaAdapterJar.dependsOn 'getAnythinkCoreJar'
getAnythinkNonChinaAdapterJar.dependsOn 'getAnythinkChinaAdapterJar'
proguardAnyThinkCoreJar.dependsOn 'getAnythinkNonChinaAdapterJar'
proguardAnythinkChinaAdapterJar.dependsOn 'proguardAnyThinkCoreJar'
proguardAnythinkNonChinaAdapterJar.dependsOn 'proguardAnythinkChinaAdapterJar'
unzipAnythinkCore.dependsOn 'proguardAnythinkNonChinaAdapterJar'
unzipAnythinkChinaAdapter.dependsOn 'unzipAnythinkCore'
unzipAnythinkNonChinaAdapter.dependsOn 'unzipAnythinkChinaAdapter'


makeCoreJar.dependsOn 'unzipAnythinkNonChinaAdapter'
makeChinaJar.dependsOn 'makeCoreJar'
makeNativeJar.dependsOn 'makeChinaJar'
makeRewardedVideoJar.dependsOn 'makeNativeJar'
makeBannerJar.dependsOn 'makeRewardedVideoJar'
makeInterstitialJar.dependsOn 'makeBannerJar'
makeSplashAdJar.dependsOn 'makeInterstitialJar'
makeNetworkFBJar.dependsOn 'makeSplashAdJar'
makeNetworkAdmobJar.dependsOn 'makeNetworkFBJar'
makeNetworkApplovinJar.dependsOn 'makeNetworkAdmobJar'
makeNetworkFlurryJar.dependsOn 'makeNetworkApplovinJar'
makeNetworkInmobiJar.dependsOn 'makeNetworkFlurryJar'
makeNetworkMintegralNonchinaJar.dependsOn 'makeNetworkInmobiJar'
makeNetworkMintegralChinaJar.dependsOn 'makeNetworkMintegralNonchinaJar'
makeNetworkGDTJar.dependsOn 'makeNetworkMintegralChinaJar'
makeNetworkMopubJar.dependsOn 'makeNetworkGDTJar'
makeNetworkAdcolonyJar.dependsOn 'makeNetworkMopubJar'
makeNetworkChartboostJar.dependsOn 'makeNetworkAdcolonyJar'
makeNetworkIronsourceJar.dependsOn 'makeNetworkChartboostJar'
makeNetworkTapjoyJar.dependsOn 'makeNetworkIronsourceJar'
makeNetworkUnityadsJar.dependsOn 'makeNetworkTapjoyJar'
makeNetworkVungleJar.dependsOn 'makeNetworkUnityadsJar'
makeNetworkTouTiaoNonChinaJar.dependsOn 'makeNetworkVungleJar'
makeNetworkTouTiaoChinaJar.dependsOn 'makeNetworkTouTiaoNonChinaJar'
makeNetworkAppnextJar.dependsOn 'makeNetworkTouTiaoChinaJar'
makeNetworkBaiduJar.dependsOn 'makeNetworkAppnextJar'
makeNetworkNendJar.dependsOn 'makeNetworkBaiduJar'
makeNetworkMaioJar.dependsOn 'makeNetworkNendJar'
makeNetworkStartAppJar.dependsOn 'makeNetworkMaioJar'
makeNetworkSuperawesomeJar.dependsOn 'makeNetworkStartAppJar'
makeNetworkKSJar.dependsOn 'makeNetworkSuperawesomeJar'
makeNetworkSigmobJar.dependsOn 'makeNetworkKSJar'
makeNetworkOguryJar.dependsOn 'makeNetworkSigmobJar'
makeNetworkFyberJar.dependsOn 'makeNetworkOguryJar'
makeNetworkHuaweiJar.dependsOn 'makeNetworkFyberJar'
makeNetworkKidozJar.dependsOn 'makeNetworkHuaweiJar'
makeNetworkMyTargetJar.dependsOn 'makeNetworkKidozJar'
cpSDKResToOutput.dependsOn 'makeNetworkMyTargetJar'
//

outputCoreAAR.dependsOn 'assembleRelease'
outputChinaCoreAAR.dependsOn 'assembleRelease'
outputNativeAAR.dependsOn 'assembleRelease'
outputRewardedVideoAAR.dependsOn 'assembleRelease'
outputBannerAAR.dependsOn 'assembleRelease'
outputInterstitialAAR.dependsOn 'assembleRelease'
outputSplashAdAAR.dependsOn 'assembleRelease'

copyNonChinaNecessaryResPackage.dependsOn 'copyChinaNecessaryResPackage'
makeTopOnSDK.dependsOn 'copyNonChinaNecessaryResPackage'

